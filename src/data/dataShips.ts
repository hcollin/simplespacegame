import {
    SHIPCLASS,
    ShipDesign,
    ShipDesignSpec,
    ShipEngine,
    ShipPartSlot,
    ShipSystem,
    ShipWeapon,
    WEAPONTYPE,
} from "../models/Units";
import { arnd, rnd, roll } from "../utils/randUtils";

export enum SHIPSYSTEMID {
    ColonyPod = "Colonization Pod",
    Bombardment = "Planetary Bombardment",
}

const DATASHIPSYSTEMS: ShipSystem[] = [
    {
        id: SHIPSYSTEMID.ColonyPod,
        name: "Colonization Pod",
        description: "Colonization is used to colonize foreign systems that do not have any population yet.",
        part: {
            notAvailableInClasses: [SHIPCLASS.FIGHTER, SHIPCLASS.PATROL, SHIPCLASS.CORVETTE],
            points: 10,
            slot: ShipPartSlot.OTHER,
            techPreReq: null,
        },
    },
    {
        id: SHIPSYSTEMID.Bombardment,
        name: "Planetary Bombardment",
        description: "Makes planetary bombardment of this unit much more efficient",
        part: {
            notAvailableInClasses: [SHIPCLASS.FIGHTER, SHIPCLASS.PATROL, SHIPCLASS.CORVETTE, SHIPCLASS.FRIGATE],
            points: 8,
            slot: ShipPartSlot.OTHER,
            techPreReq: null,
        },
    },
];

export enum SHIPENGINEIDS {
    NoEngine = "No FTL Engine",
    EngineIon = "Ion Engine",
    EngineSail = "Solar Wind Sails",
    FusionDrive = "Fusion Drive",
    SubLightEngine = "SubLight Engine",
    WarpEngine = "Warp Drive",
}

const DATASHIPENGINES: ShipEngine[] = [
    {
        id: SHIPENGINEIDS.EngineIon,
        name: "Ion Engine",
        range: 10,
        speed: 5,
        agility: 0,
        part: {
            notAvailableInClasses: [],
            points: 1,
            slot: ShipPartSlot.ENGINE,
            techPreReq: null,
        },
    },
    {
        id: SHIPENGINEIDS.FusionDrive,
        name: "Fusion Drive",
        range: 20,
        speed: 7,
        agility: 10,
        part: {
            notAvailableInClasses: [],
            points: 3,
            slot: ShipPartSlot.ENGINE,
            techPreReq: null,
        },
    },
    {
        id: SHIPENGINEIDS.EngineSail,
        name: "Solar Wind Sails",
        range: 40,
        speed: 2,
        agility: -20,
        part: {
            notAvailableInClasses: [],
            points: 2,
            slot: ShipPartSlot.ENGINE,
            techPreReq: null,
        },
    },
    {
        id: SHIPENGINEIDS.WarpEngine,
        name: "Warp Drive",
        range: 15,
        speed: 15,
        agility: 0,
        part: {
            notAvailableInClasses: [],
            points: 5,
            slot: ShipPartSlot.ENGINE,
            techPreReq: null,
        },
    },
    {
        id: SHIPENGINEIDS.SubLightEngine,
        name: "System Engine",
        range: 0,
        speed: 0,
        agility: 30,
        part: {
            notAvailableInClasses: [],
            points: 1,
            slot: ShipPartSlot.ENGINE,
            techPreReq: null,
        },
    },
    {
        id: SHIPENGINEIDS.NoEngine,
        name: "Stationary",
        range: 0,
        speed: 0,
        agility: -100,
        part: {
            notAvailableInClasses: [],
            points: 0,
            slot: ShipPartSlot.ENGINE,
            techPreReq: null,
        },
    },
];

export enum SHIPWEAPONSPECIAL {
    DOUBLESHOT = "Double Shot (x2)", // Roll for damage twice when hit
    RAPIDFIRE = "Rapid Fire (x3)", // Roll for damage three times when hit
    HAILOFFIRE = "Hail of Fire (x4)", // Roll for damage four times when hit
    ARMOURPIERCE = "Armour piercing", // Ignore armor on Kinetic weapons
    BURN = "Burning", //TODO: Cause burn effect that causes damage
    EMP = "EMP Strike", //TODO: Disable shields for turn or two
    ANTIFIGHTER = "Antifighter weapon", // Increase accuracy against smaller ships, less for higher
    AITARGETING = "AI Targeting", //TODO: Decrese the targets agility
}

const DATASHIPWEAPONS: ShipWeapon[] = [
    {
        id: "",
        name: "Point Defense Gun",
        type: WEAPONTYPE.KINETIC,
        accuracy: 0, // Accuracy is calculated by the AntiFighter Skill
        cooldown: 0,
        cooldownTime: 0,
        damage: [4, 6],
        special: [SHIPWEAPONSPECIAL.ANTIFIGHTER],
        part: {
            slot: ShipPartSlot.WEAPON,
            notAvailableInClasses: [SHIPCLASS.FIGHTER, SHIPCLASS.PATROL, SHIPCLASS.CORVETTE, SHIPCLASS.FRIGATE],
            points: 5,
            techPreReq: null,
        },
    },
    {
        id: "",
        name: "Anti-Fighter Laser",
        type: WEAPONTYPE.ENERGY,
        accuracy: 10,
        cooldown: 0,
        cooldownTime: 0,
        damage: [2, 8],
        special: [SHIPWEAPONSPECIAL.ANTIFIGHTER],
        part: {
            slot: ShipPartSlot.WEAPON,
            notAvailableInClasses: [SHIPCLASS.FIGHTER, SHIPCLASS.PATROL, SHIPCLASS.CORVETTE],
            points: 7,
            techPreReq: null,
        },
    },
    {
        id: "",
        name: "Small Laser",
        type: WEAPONTYPE.ENERGY,
        accuracy: 90,
        cooldown: 0,
        cooldownTime: 0,
        damage: [2, 6],
        special: [SHIPWEAPONSPECIAL.DOUBLESHOT],
        part: {
            slot: ShipPartSlot.WEAPON,
            notAvailableInClasses: [SHIPCLASS.FIGHTER, SHIPCLASS.CRUISER, SHIPCLASS.BATTLESHIP],
            points: 3,
            techPreReq: null,
        },
    },
    {
        id: "",
        name: "Rapid Laser",
        type: WEAPONTYPE.ENERGY,
        accuracy: 80,
        cooldown: 0,
        cooldownTime: 0,
        damage: [4, 10],
        special: [SHIPWEAPONSPECIAL.RAPIDFIRE],
        part: {
            slot: ShipPartSlot.WEAPON,
            notAvailableInClasses: [
                SHIPCLASS.FIGHTER,
                SHIPCLASS.PATROL,
                SHIPCLASS.CORVETTE,
                SHIPCLASS.FRIGATE,
                SHIPCLASS.DESTROYER,
                SHIPCLASS.CRUISER,
                SHIPCLASS.BATTLESHIP,
            ],
            points: 5,
            techPreReq: null,
        },
    },
    {
        id: "",
        name: "Laser Turret",
        type: WEAPONTYPE.ENERGY,
        accuracy: 70,
        cooldown: 0,
        cooldownTime: 0,
        damage: [15, 20],
        special: [],
        part: {
            slot: ShipPartSlot.WEAPON,
            notAvailableInClasses: [SHIPCLASS.FIGHTER, SHIPCLASS.PATROL],
            points: 4,
            techPreReq: null,
        },
    },
    {
        id: "",
        name: "Large Laser",
        type: WEAPONTYPE.ENERGY,
        accuracy: 70,
        cooldown: 0,
        cooldownTime: 0,
        damage: [20, 30],
        special: [],
        part: {
            slot: ShipPartSlot.WEAPON,
            notAvailableInClasses: [
                SHIPCLASS.FRIGATE,
                SHIPCLASS.PATROL,
                SHIPCLASS.DESTROYER,
                SHIPCLASS.CRUISER,
                SHIPCLASS.BATTLESHIP,
            ],
            points: 7,
            techPreReq: null,
        },
    },
    {
        id: "",
        name: "Turbo Laser",
        type: WEAPONTYPE.ENERGY,
        accuracy: 70,
        cooldown: 0,
        cooldownTime: 0,
        damage: [7, 14],
        special: [SHIPWEAPONSPECIAL.HAILOFFIRE],
        part: {
            slot: ShipPartSlot.WEAPON,
            notAvailableInClasses: [SHIPCLASS.FIGHTER, SHIPCLASS.PATROL, SHIPCLASS.CORVETTE, SHIPCLASS.FRIGATE],
            points: 14,
            techPreReq: null,
        },
    },
    {
        id: "",
        name: "Machinegun",
        type: WEAPONTYPE.KINETIC,
        accuracy: 50,
        cooldown: 0,
        cooldownTime: 1,
        damage: [2, 5],
        special: [SHIPWEAPONSPECIAL.HAILOFFIRE],
        part: {
            slot: ShipPartSlot.WEAPON,
            notAvailableInClasses: [SHIPCLASS.FRIGATE, SHIPCLASS.DESTROYER, SHIPCLASS.CRUISER, SHIPCLASS.BATTLESHIP],
            points: 2,
            techPreReq: null,
        },
    },
    {
        id: "",
        name: "Small Railgun",
        type: WEAPONTYPE.KINETIC,
        accuracy: 55,
        cooldown: 0,
        cooldownTime: 0,
        damage: [10, 15],
        special: [],
        part: {
            slot: ShipPartSlot.WEAPON,
            notAvailableInClasses: [SHIPCLASS.FIGHTER, SHIPCLASS.PATROL],
            points: 7,
            techPreReq: null,
        },
    },
    {
        id: "",
        name: "Large Railgun",
        type: WEAPONTYPE.KINETIC,
        accuracy: 45,
        cooldown: 0,
        cooldownTime: 0,
        damage: [20, 30],
        special: [],

        part: {
            slot: ShipPartSlot.WEAPON,
            notAvailableInClasses: [SHIPCLASS.FIGHTER, SHIPCLASS.PATROL, SHIPCLASS.CORVETTE],
            points: 14,
            techPreReq: null,
        },
    },
    {
        id: "",
        name: "Mass Cannon",
        type: WEAPONTYPE.KINETIC,
        accuracy: 60,
        cooldown: 0,
        cooldownTime: 1,
        damage: [40, 50],
        special: [],
        part: {
            slot: ShipPartSlot.WEAPON,
            notAvailableInClasses: [SHIPCLASS.FIGHTER, SHIPCLASS.PATROL, SHIPCLASS.CORVETTE, SHIPCLASS.FRIGATE],
            points: 20,
            techPreReq: null,
        },
    },
    {
        id: "",
        name: "Mega Cannon",
        type: WEAPONTYPE.KINETIC,
        accuracy: 50,
        cooldown: 0,
        cooldownTime: 2,
        damage: [70, 80],
        special: [],
        part: {
            slot: ShipPartSlot.WEAPON,
            notAvailableInClasses: [
                SHIPCLASS.FIGHTER,
                SHIPCLASS.PATROL,
                SHIPCLASS.CORVETTE,
                SHIPCLASS.FRIGATE,
                SHIPCLASS.DESTROYER,
                SHIPCLASS.CARRIER,
            ],
            points: 30,
            techPreReq: null,
        },
    },
    {
        id: "",
        name: "Homing Missile",
        type: WEAPONTYPE.MISSILE,
        accuracy: 90,
        cooldown: 0,
        cooldownTime: 3,
        damage: [30, 40],
        special: [],
        part: {
            slot: ShipPartSlot.WEAPON,
            notAvailableInClasses: [SHIPCLASS.FIGHTER, SHIPCLASS.PATROL, SHIPCLASS.CORVETTE],
            points: 10,
            techPreReq: null,
        },
    },
    {
        id: "",
        name: "Rockets",
        type: WEAPONTYPE.MISSILE,
        accuracy: 60,
        cooldown: 0,
        cooldownTime: 1,
        damage: [20, 25],
        special: [],
        part: {
            slot: ShipPartSlot.WEAPON,
            notAvailableInClasses: [
                SHIPCLASS.FIGHTER,
                SHIPCLASS.DESTROYER,
                SHIPCLASS.CARRIER,
                SHIPCLASS.CRUISER,
                SHIPCLASS.BATTLESHIP,
            ],
            points: 7,
            techPreReq: null,
        },
    },
    {
        id: "",
        name: "Fighter Missile",
        type: WEAPONTYPE.MISSILE,
        accuracy: 80,
        cooldown: 2,
        cooldownTime: 10,
        damage: [30, 40],
        special: [],
        part: {
            slot: ShipPartSlot.WEAPON,
            notAvailableInClasses: [
                SHIPCLASS.CORVETTE,
                SHIPCLASS.FRIGATE,
                SHIPCLASS.CRUISER,
                SHIPCLASS.DESTROYER,
                SHIPCLASS.BATTLESHIP,
                SHIPCLASS.CARRIER,
                SHIPCLASS.PATROL,
            ],
            points: 1,
            techPreReq: null,
        },
    },
];

// [SHIPCLASS.FIGHTER, SHIPCLASS.PATROL, SHIPCLASS.CORVETTE, SHIPCLASS.FRIGATE, SHIPCLASS.CARRIER, SHIPCLASS.DESTROYER, SHIPCLASS.CRUISER, SHIPCLASS.BATTLESHIP]

function getWeaponByName(name: string): ShipWeapon {
    const w = DATASHIPWEAPONS.find((w: ShipWeapon) => w.name === name);
    if (!w) throw new Error(`Unknown weapon ${name}`);

    return { ...w, id: `W-${rnd(100000, 999999)}-${Date.now()}` };
}

export const ShipDesignSpecs: ShipDesignSpec[] = [
    {
        shipClass: SHIPCLASS.PATROL,
        points: 5,
        hull: 40,
        baseAgility: 70,
        sizeModifier: 1,
    },
    {
        shipClass: SHIPCLASS.CORVETTE,
        points: 10,
        hull: 60,
        baseAgility: 50,
        sizeModifier: 2,
    },
    {
        shipClass: SHIPCLASS.FRIGATE,
        points: 25,
        hull: 110,
        baseAgility: 40,
        sizeModifier: 2,
    },
    {
        shipClass: SHIPCLASS.DESTROYER,
        points: 45,
        hull: 150,
        baseAgility: 35,
        sizeModifier: 3,
    },
    {
        shipClass: SHIPCLASS.CRUISER,
        points: 65,
        hull: 180,
        baseAgility: 30,
        sizeModifier: 4,
    },
    {
        shipClass: SHIPCLASS.CARRIER,
        points: 80,
        hull: 160,
        baseAgility: 25,
        sizeModifier: 6,
    },
    {
        shipClass: SHIPCLASS.BATTLESHIP,
        points: 120,
        hull: 220,
        baseAgility: 10,
        sizeModifier: 8,
    },
];

export function getDesignSpecByShipClass(sc: SHIPCLASS): ShipDesignSpec {
    const sp = ShipDesignSpecs.find((sd: ShipDesignSpec) => sd.shipClass === sc);
    if (!sp) {
        throw new Error(`Unknown ship Spec ${sc}`);
    }
    return sp;
}

/**
 * These designs are used to create Fighters and as default designs when the faction starts playing
 */
const DATANEWSHIPS: ShipDesign[] = [
    {
        id: "",
        typeClassName: "Fighter",
        sizeIndicator: 1,
        type: SHIPCLASS.FIGHTER,
        name: "Fighter",
        cost: 0,
        buildTime: 0,
        minIndustry: 0,
        techReq: [],
        fighters: 0,
        fightersMax: 0,
        troops: 0,
        speed: 0,
        agility: 80,
        armor: 0,
        hull: 15,
        shieldRegeneration: 0,
        shieldsMax: 0,
        keywords: [],
        engineId: SHIPENGINEIDS.EngineIon,
        systemIds: [],
        weapons: [getWeaponByName("Small Laser"), getWeaponByName("Fighter Missile")],
        description:
            "One man fighter craft that does not have warp capability in itself. Fighters cannot be built on systems they are automatically deployed during combet and new fighters are built on friendly systems autamatically during repairs.",
    },
    {
        id: "",
        typeClassName: "Corvette",
        sizeIndicator: 3,
        type: SHIPCLASS.CORVETTE,
        name: "Corvette",
        cost: 3,
        buildTime: 2,
        minIndustry: 1,
        techReq: [],
        fighters: 0,
        fightersMax: 0,
        troops: 1,
        speed: 6,
        agility: 50,
        armor: 1,
        hull: 75,
        shieldRegeneration: 0,
        shieldsMax: 0,
        keywords: [],
        engineId: SHIPENGINEIDS.EngineIon,
        systemIds: [],
        weapons: [
            getWeaponByName("Laser Turret"),
            // getWeaponByName("Homing Missile")
        ],
        description:
            "Small, cheap and cheerful ship. Mainly used to bulk up the numbers in fleets and for reconnaissance in lesser empires.",
    },
];

const DATASHIPS = DATANEWSHIPS;

export default DATASHIPS;

export function shipNameGenerator(): string {
    const wordAdjective: string[] = [
        "Angry",
        "Altered",
        "Argent",
        "Annoited",
        "Ancient",
        "Bitter",
        "Blind",
        "Bright",
        "Cold",
        "Dark",
        "Divine",
        "Eternal",
        "Enraged",
        "Elegant",
        "Fourth",
        "Faithful",
        "Fallen",
        "First",
        "Fierce",
        "Futile",
        "Final",
        "Grand",
        "Glorius",
        "Holy",
        "Light",
        "Last",
        "Mute",
        "New",
        "Old",
        "Risen",
        "Righteous",
        "Reliable",
        "Second",
        "Supreme",
        "Shadow",
        "Triumphant",
        "True",
        "Third",
        "Unholy",
        "Ultimate",
        "Valiant",
    ];

    const wordDoer: string[] = [
        "Avenger",
        "Annihilator",
        "Aviator",
        "Bomber",
        "Crusader",
        "Corroder",
        "Champion",
        "Dreamer",
        "Defender",
        "Destroyer",
        "Darkness",
        "Explorer",
        "Engineer",
        "Ender",
        "Finder",
        "Fighter",
        "Finalizer",
        "Finisher",
        "Follower",
        "Hellbringer",
        "Harbringer",
        "Hussar",
        "Inventor",
        "Invader",
        "Justicar",
        "Messeger",
        "Master",
        "Merchant",
        "Oppressor",
        "Orator",
        "Punisher",
        "Player",
        "Redeemer",
        "Reclaimer",
        "Ravager",
        "Speaker",
        "Silencer",
        "Skipper",
        "Seeker",
        "Templar",
        "Tormentor",
        "Terminator",
        "Unbeliever",
        "Vindicator",
        "Visitor",
    ];

    // const wordColor: string[] = ["Black", "White", "Gray", "Red", "Blue", "Green", "Yellow", "Purple", "Brown"];

    // const wordTimeAdjective: string[] = ["Ancient", "First", "Last", "New", "Old", "Young"];

    // const wordDescriptive: string[] = [
    //     "Ancient",
    //     "Death",
    //     "Dread",
    //     "Dark",
    //     "Fury",
    //     "Ghost",
    //     "Life",
    //     "Necro",
    //     "Phantom",
    //     "Spectre",
    //     "Umbra",
    //     "True",
    // ];

    const wordThing: string[] = [
        "Antihero",
        "Armor",
        "Beast",
        "Bard",
        "Caesar",
        "Cadaver",
        "Clockwork",
        "Dragon",
        "Dagger",
        "Excalibur",
        "Edict",
        "Falcon",
        "Force",
        "Flag",
        "Goliath",
        "God",
        "General",
        "Goddess",
        "Ghost",
        "Hammer",
        "Hero",
        "Hades",
        "Hydra",
        "Idol",
        "Knight",
        "Lightbringer",
        "Machine",
        "Mage",
        "Monster",
        "Mace",
        "Ninja",
        "Nexus",
        "Nosferatu",
        "Odin",
        "Pharaoh",
        "Patriot",
        "Pegasus",
        "Ring",
        "Reign",
        "Queen",
        "Quasar",
        "Quarc",
        "Ruby",
        "Ronan",
        "Stiletto",
        "Spear",
        "Scimitar",
        "Samurai",
        "Sword",
        "Shield",
        "Song",
        "Unicorn",
        "Warmachine",
        "Wizard",
        "Valkyrie",
    ];

    const wordObject: string[] = [
        "Argument",
        "Ashes",
        "Bones",
        "Cataclysm",
        "Conquest",
        "Code",
        "Commandment",
        "Conflict",
        "Destiny",
        "Doom",
        "Dream",
        "Dreams",
        "Downfall",
        "Delusion",
        "Desolation",
        "Death",
        "Empire",
        "Entropy",
        "End",
        "Extinction",
        "Expansion",
        "Empyrean",
        "Faith",
        "Fury",
        "Forms",
        "Gaia",
        "Hell",
        "Heaven",
        "Hymn",
        "Infinity",
        "Imperium",
        "Illuminati",
        "Illusion",
        "Justice",
        "Judgement",
        "Liturgy",
        "Law",
        "Menace",
        "Memory",
        "Nature",
        "Nightmares",
        "Order",
        "Paradise",
        "Progress",
        "Procedures",
        "Redemption",
        "Resurrection",
        "Reality",
        "Revenge",
        "Rebirth",
        "Ritual",
        "Rites",
        "Ruin",
        "Sacrament",
        "Stars",
        "State",
        "Songs",
        "Space",
        "Sorrow",
        "Symmetry",
        "Sky",
        "Tragedy",
        "Terror",
        "Trance",
        "Truth",
        "Universe",
        "Unification",
        "Victory",
        "Valhalla",
        "Whisper",
        "War",
    ];

    // const concepts: string[] = [
    //     "Death",

    //     "Fury",
    //     "Force",

    //     "Fantasy",
    //     "Hymn",
    //     "History",
    //     "Liturgy",
    //     "Life",
    //     "Myth",

    //     "Memorial",
    //     "Paradise",

    //     "Pride",
    //     "Reign",
    //     "Supernova",
    //     "Song",
    // ];

    const partB = [...wordThing, ...wordDoer, ...wordObject];

    if (roll(33)) {
        return `${arnd(wordDoer)} of ${arnd(wordObject)}`;
    }

    if (roll(25)) {
        return `${arnd(wordThing)} of ${arnd(wordObject)}`;
    }

    if (roll(15)) {
        return `${arnd(wordObject)} in ${arnd(wordAdjective)} ${arnd(wordObject)}`;
    }

    return `${arnd(wordAdjective)} ${arnd(partB)}`;
}

export function shipClassNameGenerator(cls?: SHIPCLASS): string {
    const classNames: string[] = [
        "Argument",
        "Annihilator",
        "Bolero",
        "Brigadier",
        "Cosmos",
        "Commander",
        "Constitution",
        "Elegant",
        "Elegy",
        "Fortress",
        "Fantasy",
        "Gracious",
        "General",
        "Hero",
        "Humility",
        "Invader",
        "Intrigue",
        "Innuendo",
        "Imperial",
        "Javelin",
        "Jester",
        "Killer",
        "Kolibri",
        "Lawbraker",
        "Lenient",
        "Lightbringer",
        "Master",
        "Miracle",
        "Nova",
        "Nebula",
        "Orion",
        "Oliargh",
        "Odin",
        "Pestilence",
        "Pillar",
        "Quantum",
        "Quest",
        "Quasar",
        "Radiant",
        "Ripper",
        "Relinquish",
        "Starship",
        "Silhuette",
        "Silver",
        "Tormentor",
        "Terminator",
        "Tiamat",
        "Universe",
        "Ulysses",
        "Victory",
        "Vindicator",
        "Warhammer",
        "Wisdom",
        "Xenophobe",
        "Yggdrasil",
        "Zodiac",
    ];

    return arnd(classNames);
}

export { DATANEWSHIPS, DATASHIPWEAPONS, DATASHIPENGINES, DATASHIPSYSTEMS };
